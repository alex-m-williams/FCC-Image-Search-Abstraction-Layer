 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
const url = require('url');
const https = require('https');

//mongodb://fcc:fcc@ds135926.mlab.com:35926/fccimagesearch
const dburl = 'mongodb://fcc:fcc@ds135926.mlab.com:35926/fccimagesearch';
const mongo = require('mongodb').MongoClient;

//g custom search api: AIzaSyASRCH2YLWcpEDLQnuDal5Gean9WMhTGlg
const gSearch = 'https://content.googleapis.com/customsearch/v1?cx=011903740374000541668%3Axiqnhvafoyy&'
const gSearchFinalParam = '&searchType=image&key=AIzaSyASRCH2YLWcpEDLQnuDal5Gean9WMhTGlg'
//const gSearch = 'www.google.com';

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });

app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

app.route('/api/imagesearch/*')
  .get((req, res) => {
    let routePath = '/api/imagesearch/';
    let urlRequest = url.parse(req.url, true);
    let pathName = urlRequest.pathname;
    let desiredPath = pathName.slice(routePath.length, pathName.length);
    let offset = req.query.offset;
    let builtString = gSearch;
    builtString += `q=${desiredPath}`;
    if (offset >= 1) {
      builtString += `&start=${offset}`;
    }
    builtString += gSearchFinalParam;
    
    const imageReq = https.request(builtString, (imageRes) => {
      let imageArray = [];
      let bufferString = "";
      
      imageRes.on('data', (chunk) => {
        bufferString += chunk;
      });
      imageRes.on('end', function () {
        let finalObj = JSON.parse(bufferString);
        let latestSearch = finalObj.queries.request[0].searchTerms;
        let newDate = new Date();
        let latestSearchObj = {"term": latestSearch, "when": newDate};
        finalObj = finalObj.items;
        res.writeHead(200, {'Content-Type': 'application/json' });
        for (let i = 0; i < finalObj.length; i++) {
          let image = {"url": finalObj[i].link, "snippet": finalObj[i].snippet, "thumbnail": finalObj[i].image.thumbnailLink, "context": finalObj[i].image.contextLink};
          imageArray.push(JSON.stringify(image));
        }
        mongo.connect(dburl, (err, database) => {
          if (err) throw err;
          const myAwesomeDB = database.db('fccimagesearch')
          let docs = myAwesomeDB.collection('searches');
          docs.insert(latestSearchObj, (err, data) => {
             if (err) throw err;
             console.log(JSON.stringify(latestSearchObj));
           });
          database.close();
        });
        res.write(imageArray.toString());
        res.end();
      });
    });

    imageReq.on('error', (e) => {
      console.error(e);
    });
    imageReq.end();  
});

app.route('/api/latest/imagesearch').get((req, res) => {
  mongo.connect(dburl, (err, database) => {
          if (err) throw err;
          const myAwesomeDB = database.db('fccimagesearch')
          let docs = myAwesomeDB.collection('searches');
          let recentSearchArray = [];
          docs.find({}).toArray((err, result) => {
             if (err) throw err;
             for (let i = 0; i < result.length; i++ ){
               console.log(result[i]);
                let searchObj = {term: result[i].term, when: result[i].when};
               recentSearchArray.push(JSON.stringify(searchObj));
             }
            res.writeHead(200, {'Content-Type': 'application/json' });
            res.write(recentSearchArray.toString());
            res.end();
            database.close();
           });   
  });
});
  



// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

